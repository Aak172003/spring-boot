package com.app.eshop.services;
import com.app.eshop.dto.AddressDTO;
import com.app.eshop.dto.UserRequest;
import com.app.eshop.dto.UserResponse;
import com.app.eshop.models.Address;
import com.app.eshop.repositories.UserRepository;
import com.app.eshop.models.User;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Controller;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class UserService {
//    We need to migrate from list based storage to database storage
    private final UserRepository userRepository;

//    This is list based storage we are removing and using database storage
//    private List<User> userList = new ArrayList<>();
//    private Long nextId = 1L;

//    here receive userRepository object with dependency injection
//    we can add constructor like this , but we have one more option like RequiredArgsConstructor whcih do the dame things
//    public UserService(UserRepository userRepository) {
//        this.userRepository = userRepository;
//    }

    public List<UserResponse> fetchAllUsers(){

//        System.out.println("fetch user ::::::::::::: " );
//        System.out.println(userList);
//        return  userList;

//        This is database storage approach

//        This is before DTO implement
//        return  userRepository.findAll();

        return  userRepository.findAll().stream()
                .map(this::mapToUserResponse)
                .collect(Collectors.toList());
    }

    public Optional<UserResponse> fetchUser(Long id){
//        public User fetchUser(Long id){

//        for(User user:userList) {
//            if (user.getId().equals(id)) {
//                return user;
//            }
//        }
//        return null;

//        Compare with id which it receives from where this is called

//        This is list based storage , and above as well , but here we use java feature like streams , but  above we do simply loop

//        return userList.stream()
//                .filter(user -> user.getId().equals(id))
//                .findFirst();

//        This is database storage approach

        return userRepository.findById(id).map(this::mapToUserResponse);
    }


    public void addUserUser(UserRequest userRequest){
//        Now we are getting autogenerated unique value because id is now our primary key
//        user.setId(nextId++);
//        userList.add(user);
//        System.out.println("add user ::::::::::::: " );
//        System.out.println(userList);

//        This is database storage approach
       User user = new User();
       updateUserFromRequest(user, userRequest);
       userRepository.save(user);
    }

    public boolean updateUser(Long id , UserRequest updatedUserRequest){
//        return userList.stream()
//        .filter(user -> user.getId().equals(id))
//        .findFirst()
//        .map(existingUser ->{
//            existingUser.setFirstName(updatedUser.getFirstName());
//            existingUser.setLastName(updatedUser.getLastName());
//            return  true;
//        })
//        .orElse(false);


//        This is database storage approach
//        return userRepository.findById(id)
//                .map(existingUser ->{
//            existingUser.setFirstName(updatedUser.getFirstName());
//            existingUser.setLastName(updatedUser.getLastName());
//            userRepository.save(existingUser);
//            return true;
//        }).orElse(false);


        return userRepository.findById(id)
                .map(existingUser ->{
                    updateUserFromRequest(existingUser , updatedUserRequest);
                    userRepository.save(existingUser);
                    return true;
                }).orElse(false);
    }

    private void updateUserFromRequest(User user , UserRequest userRequest){

        user.setFirstName(userRequest.getFirstName());
        user.setLastName(userRequest.getLastName());
        user.setEmail(userRequest.getEmail());
        user.setPhoneNo(userRequest.getPhoneNo());
        if(userRequest.getAddress() != null){
            Address address = new Address();
            address.setStreet(userRequest.getAddress().getStreet());
            address.setState(userRequest.getAddress().getState());
            address.setZipcode(userRequest.getAddress().getZipcode());
            address.setCity(userRequest.getAddress().getCity());
            address.setCountry(userRequest.getAddress().getCountry());
            user.setAddress(address);
        }
    }
    private UserResponse mapToUserResponse(User user){
        UserResponse response = new UserResponse();
        response.setId(String.valueOf(user.getId()));
        response.setFirstName(user.getFirstName());
        response.setLastName(user.getLastName());
        response.setEmail(user.getEmail());
        response.setPhoneNo(user.getPhoneNo());
        response.setRole(user.getRole());
        if(user.getAddress()!= null){
            AddressDTO addressDTO = new AddressDTO();
            addressDTO.setStreet(user.getAddress().getStreet());
            addressDTO.setCity(user.getAddress().getCity());
            addressDTO.setState(user.getAddress().getState());
            addressDTO.setCountry(user.getAddress().getCountry());
            addressDTO.setZipcode(user.getAddress().getZipcode());
            response.setAddress(addressDTO);
        }
        return response;
    }

}